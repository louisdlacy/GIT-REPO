/**
 * WARNING: DO NOT EDIT THIS FILE OR REMOVE IT FROM YOUR SCRIPTS IF YOU
 * ARE USING THE PARTS-BASED ANIMATION SYSTEM.
 *
 * Docs: https://github.com/todd-roberts/HWPBA
 */
import * as hz from "horizon/core";
/** No-op: brings the system into the worldâ€™s scripts. */
export declare class PartsBasedAnimationSystem extends hz.Component<typeof PartsBasedAnimationSystem> {
    start(): void;
}
type QuaternionFrames = number[][];
type Vector3Frames = number[][];
export type AnimationAsset = {
    animations: AnimationData;
    /** Horizon-native vec3 per node (exporter already applied axis mapping) */
    initialPositions: Record<string, number[]>;
    /** Exact prefix added to exported part names (e.g., "Goblin_") */
    namePrefix?: string;
};
export type AnimationData = {
    [animationName: string]: AnimationNodeData;
};
export type AnimationNodeData = {
    times: number[];
    rotations: Record<string, QuaternionFrames>;
    positions: Record<string, Vector3Frames>;
};
export type AnimationPartsNode = {
    entity: hz.Entity;
    nodeName: string;
};
export type AnimatorConfig = {
    animations: AnimationData;
    parts: AnimationPartsNode[];
};
export type AnimationPlayParams = {
    animationName: string;
    speed?: number;
    loop?: boolean;
    callbacks?: {
        byFrame?: Record<number, () => void>;
        onEnd?: () => void;
    };
};
type PropsDefinition = {
    animations: {
        type: typeof hz.PropTypes.Asset;
    };
    visibleAfterLoad: {
        type: typeof hz.PropTypes.Boolean;
    };
};
export declare abstract class PB_AnimatedComponent<TConstructor extends hz.ComponentWithConstructor<PropsDefinition>> extends hz.Component<TConstructor> {
    static propsDefinition: {
        animations: {
            type: "Asset";
        };
        /** If true, the entity will be visible after the animations are loaded,
         * regardless of visibility configuration within the editor. */
        visibleAfterLoad: {
            type: "boolean";
            default: boolean;
        };
    };
    protected static withProps: <T extends Record<string, any>>(extra: T) => {
        readonly animations: {
            type: "Asset";
        };
        readonly visibleAfterLoad: {
            type: "boolean";
            default: boolean;
        };
    } & T;
    private _animator;
    private _loaded;
    protected onPreStart: () => void;
    protected onUpdate: (_dt: number) => void;
    preStart(): void;
    private collectNodes;
    /** Strict: require prefix and strip it. No other normalization. */
    private resolveNodeName;
    private applyInitialPlacement;
    private loadAndBind;
    private update;
    playAnimation: (params: AnimationPlayParams) => void;
    stopAnimation: () => void;
}
export {};
